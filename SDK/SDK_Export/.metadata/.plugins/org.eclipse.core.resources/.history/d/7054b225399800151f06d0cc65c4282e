/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include <stdlib.h>
#include "xil_io.h"
#include "xparameters.h"

#define NUM_BLOCK 23
static const int size = 127; // array size

// A heap has current size and array of elements
struct MaxHeap
{
	int size;
	int* array;
};


// A utility function to copy array
void MoveArray(int* array1)
{
	int i, array2[size];
	for (i = 0; i <= size; i++)
	{
		array2[i] = array1[i];
	}
}


// A utility function to swap to integers
//void swap(int* a, int* b) { int t = *a; *a = *b;  *b = t; }

// A utility function to XORswap to integers
void xorswap(int *a, int *b)
{
	if (a != b)
	{
		*a ^= *b;
		*b ^= *a;
		*a ^= *b;
	}
}

// The main function to heapify a Max Heap. The function
// assumes that everything under given root (element at
// index idx) is already heapified

void maxHeapify(struct MaxHeap* maxHeap, int idx)
{
	int largest = idx;  // Initialize largest as root
	int left = (idx << 1) + 1;  // left = 2*idx + 1
	int right = (idx + 1) << 1; // right = 2*idx + 2
	int i;

	// See if left child of root exists and is greater than root
	if (left < maxHeap->size &&
		maxHeap->array[left] > maxHeap->array[largest])
		largest = left;

	// See if right child of root exists and is greater than
	// the largest so far
	if (right < maxHeap->size &&
		maxHeap->array[right] > maxHeap->array[largest])
		largest = right;

	// Change root, if needed
	if (largest != idx)
	{
		xorswap(&maxHeap->array[largest], &maxHeap->array[idx]);
		maxHeapify(maxHeap, largest);
	}

}

// A utility function to create a max heap of given capacity
struct MaxHeap* createAndBuildHeap(int *array, int size)
{
	int i;
	struct MaxHeap* maxHeap =
		(struct MaxHeap*) malloc(sizeof(struct MaxHeap));
	maxHeap->size = size;   // initialize size of heap
	maxHeap->array = array; // Assign address of first element of array

							// Start from bottommost and rightmost internal mode and heapify all
							// internal modes in bottom up way
	for (i = (maxHeap->size - 2) / 2; i >= 0; --i)
		maxHeapify(maxHeap, i);
	return maxHeap;
}

// The main function to sort an array of given size
void heapSort(int* array, int size)
{
	// Build a heap from the input data.
	struct MaxHeap* maxHeap = createAndBuildHeap(array, size);

	// Repeat following steps while heap size is greater than 1.
	// The last element in max heap will be the minimum element
	while (maxHeap->size > 1)
	{
		// The largest item in Heap is stored at the root. Replace
		// it with the last item of the heap followed by reducing the
		// size of heap by 1.
		xorswap(&maxHeap->array[0], &maxHeap->array[maxHeap->size - 1]);
		--maxHeap->size;  // Reduce heap size

						  // Finally, heapify the root of tree.
		maxHeapify(maxHeap, 0);
	}
}

int main()
{
	int i, j, k, l, complete;
	u32 arr[size], result[size];
	u8 *memory_addr;
	u32 *result_addr;
	u32 *ddr_addr;

	/*Declear Address of ram*/
    memory_addr = (u8 *) XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR;
    result_addr = (u32 *) XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR;
    ddr_addr = (u32 *) XPAR_PS7_DDR_0_S_AXI_BASEADDR;

    /*Initial Random Value and sort in software*/
    k = 0;
    l = 0;
    for (j = 0; j < NUM_BLOCK; j++){
		for (i = 0; i < size; i++){
			arr[i] = rand() % 256;
			memory_addr[k++] = arr[i];
		}

		int size = sizeof(arr) / sizeof(arr[0]);

		heapSort(arr, size);
		for(i = 0; i < size; i++){
			//printf("arr[%d] = %d\n",i,arr[i]);
		}

		for (i = 0; i < size; i++){
			ddr_addr[l++] = arr[i];
			//printf("ddr_addr[%d] = %d\n",i,ddr_addr[i]);
		}
    }

	for(i = 0; i < size*NUM_BLOCK; i++){
		//printf("memory_addr[%d] = %d\n",i,memory_addr[i]);
	}

    //Setup Number of block data
    Xil_Out32(XPAR_HEAPSORTIP_0_S_AXI_BASEADDR+2*4, NUM_BLOCK);

    //Setup interruption
    Xil_Out32(XPAR_HEAPSORTIP_0_S_AXI_BASEADDR+5*4, 0b110010000000001101100);
    Xil_Out32(XPAR_HEAPSORTIP_0_S_AXI_BASEADDR+6*4, 0b110010000000000011100);
    Xil_Out32(XPAR_HEAPSORTIP_0_S_AXI_BASEADDR+7*4, 0b110010000000000001100);
    Xil_Out32(XPAR_HEAPSORTIP_0_S_AXI_BASEADDR+8*4, 0b000011010011001000110);
    Xil_Out32(XPAR_HEAPSORTIP_0_S_AXI_BASEADDR+9*4, 0b000010010011001000110);
    Xil_Out32(XPAR_HEAPSORTIP_0_S_AXI_BASEADDR+10*4,0b000001010011001000110);

    //Reset
    Xil_Out32(XPAR_HEAPSORTIP_0_S_AXI_BASEADDR, 0x1);

    for (i = 0; i < 100; i++){}
    Xil_Out32(XPAR_HEAPSORTIP_0_S_AXI_BASEADDR, 0x0);

    //Enable
    Xil_Out32(XPAR_HEAPSORTIP_0_S_AXI_BASEADDR+1*4, 0x1);
    Xil_Out32(XPAR_HEAPSORTIP_0_S_AXI_BASEADDR+1*4, 0x0);
    //Reset

    //Wait for Complete
    complete = Xil_In32(XPAR_HEAPSORTIP_0_S_AXI_BASEADDR+4*4);
    printf("complete = %d\n",complete);
    while (complete == 0){
    	complete = Xil_In32(XPAR_HEAPSORTIP_0_S_AXI_BASEADDR+4*4);
    	printf("complete = %d\n",complete);
    }

    /*Call the output - sorted array*/
    int temp;
    int k;
    int m = 1;
	for(i = 0; i < size*NUM_BLOCK; i++){
		if (i % 4 == 0){
			temp = result_addr[i/4] & 0xff;
			if (temp != ddr_addr[k])
				m = 0;
			k++;
		}
		else if (i % 4 == 1){
			temp = (result_addr[i/4] >> 8) & 0xff;
			if (temp != ddr_addr[k])
				m = 0;
			k++;
		}
		else if (i % 4 == 2){
			temp = (result_addr[i/4] >> 16) & 0xff;
			if (temp != ddr_addr[k])
				m = 0;
			k++;
		}
		else{
			temp = (result_addr[i/4] >> 24) & 0xff;
			if (temp != ddr_addr[k])
				m = 0;
			k++;
		}
	}

	/*Compare the result in software and hardware*/
	int m = 1;

	for(i = 0; i < size*NUM_BLOCK; i++){
		if (result[i] != ddr_addr[i]){
			m = 0;
			//printf("result[%d] = %d\n",i,result[i]);
		}
	}

	if (m == 0) printf("FAILED\n");
	else printf("PASSED\n");


    //Print timer value
    printf("timer = %d \n", Xil_In32(XPAR_HEAPSORTIP_0_S_AXI_BASEADDR+3*4));


	return 0;
}
